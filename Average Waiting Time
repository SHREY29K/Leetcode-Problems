------------------------------------------------------------------------------------ LEETCODE PROBLEM NO. 1701 -------------------------------------------------------------------------------------

Q) There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:
arrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order.
timei is the time needed to prepare the order of the ith customer.
When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.
Return the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.

Example 1:

Input: customers = [[1,2],[2,5],[4,3]]
Output: 5.00000
Explanation:
1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.
2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.
3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.
So the average waiting time = (2 + 6 + 7) / 3 = 5.

Example 2:

Input: customers = [[5,2],[5,4],[10,3],[20,1]]
Output: 3.25000
Explanation:
1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.
2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.
3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.
4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.
So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.

Code Explanation:

Problem Understanding:

Input: An array of customers, where each customer is represented by [arrival, time]:
arrival: The time at which the customer arrives.
time: The time needed to prepare the order for the customer.

Output: The average waiting time of all customers. The waiting time for each customer is calculated from their arrival time until their order is completed.

Approach and Thought Process:

Initial Setup:
We need to track the current time, which starts at 0.
We need to accumulate the total waiting time for all customers.

Iterate Over Each Customer:
For each customer, extract the arrival time and the preparation time.
Check if the chef is idle or still busy when the customer arrives.
Update the current time based on whether the chef is idle or busy.

Calculate Waiting Time:
Calculate when the order for the current customer will be finished.
Calculate the waiting time for the current customer.
Update the total waiting time.

Average Calculation:
After processing all customers, calculate the average waiting time by dividing the total waiting time by the number of customers.

Code: 
class Solution {
    public double averageWaitingTime(int[][] customers) {
        // Initialize the current time to 0 (the start of the timeline)
        long currentTime = 0;
        // Initialize the total waiting time to 0
        long totalWaitingTime = 0;

        // Iterate over each customer in the input array
        for (int[] customer : customers) {
            // Extract the arrival time and the preparation time for the current customer
            int arrival = customer[0];
            int time = customer[1];

            // If the chef is idle when the customer arrives, update currentTime to the customer's arrival time
            if (currentTime < arrival) {
                currentTime = arrival;
            }

            // Calculate the finish time of the current customer's order
            long finishTime = currentTime + time;
            // Calculate the waiting time for the current customer
            long waitingTime = finishTime - arrival;

            // Accumulate the waiting time into the total waiting time
            totalWaitingTime += waitingTime;
            // Update currentTime to the finish time of the current order
            currentTime = finishTime;
        }

        // Calculate the average waiting time
        return (double) totalWaitingTime / customers.length;
    }
}
