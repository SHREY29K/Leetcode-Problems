-------------------------------------------------------------- LEETCODE PROBLEM NO. 1688 -------------------------------------------------------------------

Q) You are given an integer n, the number of teams in a tournament that has strange rules:

Case1) If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.

Case2)If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, 
and (n - 1) / 2 + 1 teams advance to the next round. Return the number of matches played in the tournament until a winner is decided.

Example 1:

Input: n = 7
Output: 6
Explanation: Details of the tournament: 
- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.
- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 3 + 2 + 1 = 6.
Example 2:

Input: n = 14
Output: 13
Explanation: Details of the tournament:
- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.
- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.
- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 7 + 3 + 2 + 1 = 13.
 

Constraints: 1 <= n <= 200

Approach : Here I would provide you with two approaches one being mathematical, other being recursive (You can also make an iterative-approach out of the recursive one).

1st Approach : --------------------------------------------------------- MATHEMATICAL APPROACH --------------------------------------------------------------------

             We need to find the number of matches that a team plays in a tournament, if we think smartly a team would play every other team present in the tournament
             except itself, which is not possible, hence the number of matches would be only one less than the total number of teams(Excluding one particular team.)

------- JAVA CODE -------
class Solution {
    public int numberOfMatches(int n) {
        return n-1;
        
    }
}

------- PYTHON CODE -------
class Solution:
    def numberOfMatches(self, n: int) -> int:
        return n-1

2nd Approach : -------------------------------------------------------- RECURSIVE APPROACH ------------------------------------------------------------------------

              Base case: If the number of teams is 1, return 0. Otherwise, return the floor division of the number of teams by 2 plus, 
                         the result of the function called recursively with the new number of teams.

------- JAVA CODE -------
class Solution {
    public int numberOfMatches(int n) {
        if (n == 1) {
            return 0;
        }
        return n / 2 + numberOfMatches(n / 2 + n % 2);
    }
}

------- PYTHON CODE -------
class Solution:
    def numberOfMatches(self, n):
        if n == 1:
            return 0
        return n // 2 + self.numberOfMatches(n // 2 + n % 2)

