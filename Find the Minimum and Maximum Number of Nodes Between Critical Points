--------------------------------------------------------------------------------- LEETCODE PROBLEM NO. 2058 ----------------------------------------------------------------------------------------

Q) A critical point in a linked list is defined as either a local maxima or a local minima.A node is a local maxima if the current node has a value strictly greater than the previous node and the next node.
A node is a local minima if the current node has a value strictly smaller than the previous node and the next node.Note that a node can only be a local maxima/minima if there exists both a previous node and a next node.
Given a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points. If there are fewer than two critical points, return [-1, -1].

Example 1:

Input: head = [3,1]
Output: [-1,-1]
Explanation: There are no critical points in [3,1].

Example 2:

Input: head = [5,3,1,2,5,1,2]
Output: [1,3]
Explanation: There are three critical points:
- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.
- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.
- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.
The minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.
The maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.

Explanation : Understand Critical Points:

A critical point in a linked list is a node that is either a local maxima or a local minima.
Local maxima: A node value is greater than both its previous and next node values.
Local minima: A node value is smaller than both its previous and next node values.
A critical point must have both a previous and a next node, so the first and last nodes cannot be critical points.
Initial Conditions:

If the linked list has fewer than three nodes, it is impossible to have any critical points, so we immediately return [-1, -1].
Traversal and Detection:

Traverse the linked list while keeping track of the current node, its previous node, and its next node.
As we traverse, we check if the current node is a critical point by comparing its value with the previous and next nodes.
If it is a critical point, we record its position (index) in a list.
Insufficient Critical Points:

After traversing the list, if we have fewer than two critical points, we return [-1, -1] because we can't calculate distances between critical points if there are fewer than two.
Calculating Distances:

If we have at least two critical points, we need to find the minimum and maximum distances between them.
Maximum Distance: This is the distance between the first and last critical points in the list.
Minimum Distance: This is the smallest distance between any two consecutive critical points.
Iterating for Distances:

To find the minimum distance, iterate through the list of critical points and compute the distance between each pair of consecutive points. Keep track of the smallest distance found.
The maximum distance is simply the distance between the first and the last critical points.

CODE :
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        if(head==null || head.next==null || head.next.next==null ){
            return new int[]{-1,-1};
        }


        ListNode slow = head;
        ListNode fast = head.next;
        List<Integer> result = new ArrayList<>();
        int index = 1;

        while(fast.next !=null){
            if((fast.val > slow.val && fast.val > fast.next.val) || (fast.val < slow.val && fast.val < fast.next.val)){
                result.add(index);
            }
            slow = fast;
            fast = fast.next;
            index++;
        }

            if(result.size()<2){
            return new int[]{-1,-1};
        }

        int maxDistance = result.get(result.size()-1) - result.get(0);
        int minDistance = Integer.MAX_VALUE;

        for(int i=1; i<result.size(); i++){
            minDistance = Math.min(minDistance, result.get(i) - result.get(i-1));
        }

        return new int[]{minDistance, maxDistance};

    }
}
