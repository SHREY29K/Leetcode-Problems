------------------------------------------------------------------------------ LEETCODE PROBLEM NO. 1190 -------------------------------------------------------------------------------------------

Q) You are given a string s that consists of lower case English letters and brackets.
Reverse the strings in each pair of matching parentheses, starting from the innermost one.
Your result should not contain any brackets.

Example 1:

Input: s = "(abcd)"
Output: "dcba"
Example 2:

Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.
Example 3:

Input: s = "(ed(et(oc))el)"
Output: "leetcode"
Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.

Code Explanation:
After reading thorugh the question, I looked at the examples and the first thought that came in my mind was that,
the output was only in the form of a string, there were no parentheses, meaning we had to remove them after reversing the 
strings between the parentheses that were there.
So, first I made the method, which would add only if !'(' or !')'.
Then just after that, we need a storage data structure, to store for the the contents for the strings that are present inside the 
  parenthesis, and being Stack is the best option.

Code:
class Solution {
    public String reverseParentheses(String s) {
        StringBuilder sb = new StringBuilder(s);
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < sb.length(); i++) {
            char c = sb.charAt(i);

            if (c == '(') {
                stack.push(i);
            } else if (c == ')') {
                int j = stack.pop();
                reverse(sb, j + 1, i - 1);
            }
        }

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < sb.length(); i++) {
            char c = sb.charAt(i);
            if (c != '(' && c != ')') {
                result.append(c);
            }
        }

        return result.toString();
    }

    private static void reverse(StringBuilder sb, int start, int end) {
        while (start < end) {
            char temp = sb.charAt(start);
            sb.setCharAt(start, sb.charAt(end));
            sb.setCharAt(end, temp);
            start++;
            end--;
        }
    }
}
