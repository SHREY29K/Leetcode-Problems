------------------------------------------------------------------------------- Leetcode problem No. 2029 -------------------------------------------------------------------------------------------

Q) Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array stones, where stones[i] is the value of the ith stone.
Alice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).
Assuming both players play optimally, return true if Alice wins and false if Bob wins.

Example 1:
Input: stones = [2,1]
Output: true
Explanation: The game will be played as follows:
- Turn 1: Alice can remove either stone.
- Turn 2: Bob removes the remaining stone. 
The sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game.

Example 2:
Input: stones = [2]
Output: false
Explanation: Alice will remove the only stone, and the sum of the values on the removed stones is 2. 
Since all the stones are removed and the sum of values is not divisible by 3, Bob wins the game.

Example 3:
Input: stones = [5,1,2,4,3]
Output: false
Explanation: Bob will always win. One possible way for Bob to win is shown below:
- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.
- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.
- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.
- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.
- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.
Alice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.
 

Constraints:
1 <= stones.length <= 105
1 <= stones[i] <= 104

Approach: Here are the initial steps that come to mind:

Understanding the Game Rules: To devise a solution, it's crucial to understand the rules of the game thoroughly. Each player aims to avoid making the sum of the values of removed stones divisible by 3. This implies that players need to be strategic in their choices to force their opponent into making a losing move.

Analyzing Stone Values: We need to consider the values of the stones and how they affect the game. Stones with values divisible by 3 are crucial, as removing them could change the game's dynamics significantly.

Identifying Winning Conditions: Understanding the conditions under which Alice can win is essential. It might involve identifying patterns in the sum of stone values or exploiting specific configurations of stones to force Bob into making a losing move.

Count Remainders: First, we count the number of stones with remainders 0, 1, and 2 when divided by 3. Let's denote these counts as R0, R1, R2

Analysis of Winning Conditions:

If R0 is even:
Alice cannot win because she will always make the sum divisible by 3 with her moves.
If R0 is odd:
Alice can potentially win if she can create a sequence of moves that results in a non-divisible sum. This depends on the relative counts of R1 and R2.
If |R1-R2| ≥ 3Alice can win because she can alternate removing stones from remainders 1 and 2 to keep the sum non-divisible by 3.
If |R1-R2| <3, Alice cannot win as Bob can always counter Alice's moves to make the sum divisible by 3.

Optimal Strategy:

If R0 is odd and |R1-R2|≥3, Alice should aim to create an alternating sequence of moves, removing stones from remainders 1 and 2.
If R0 is odd and |R1-R2|<3, Alice cannot win regardless of her moves.

Corner Cases Handling:

If there are no stones left (R0=R1=R2=0), Bob wins automatically.
If R0 is even, Bob wins automatically because Alice cannot avoid making the sum divisible by 3.

Code: ----------------------------------------------------------------------------- JAVA CODE ---------------------------------------------------------------------------------------------------
class Solution {
    public boolean stoneGameIX(int[] stones) {
        int[] modCounts = new int[3]; // To store count of stones with remainder 0, 1, and 2 respectively when divided by 3.
        for (int stone : stones) {
            modCounts[stone % 3]++;
        }
        
        // Check for corner cases where either Alice or Bob automatically wins.
        if (modCounts[0] % 2 == 0) {
            // If there are even number of stones with remainder 0, Alice cannot win since she'll make the sum divisible by 3.
            return modCounts[1] != 0 && modCounts[2] != 0;
        } else {
            // If there are odd number of stones with remainder 0, Alice can win if she has stones with remainder 1 and remainder 2 respectively.
            return Math.abs(modCounts[1] - modCounts[2]) >= 3;
        }
    }
}
